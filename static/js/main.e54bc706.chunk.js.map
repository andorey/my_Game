{"version":3,"sources":["img/smile.png","audio/laugh_2.wav","audio/crowd-excited.mp3","Item.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Item","props","imgClass","index","randomIndex","onClickHandler","className","onClick","src","smileImg","alt","App","state","counter","items","setRandomImageIndex","setState","Math","floor","random","incCounter","smileAudioRef","current","currentTime","play","React","createRef","setInterval","this","smileAudio","ref","map","i","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,yECA3CD,EAAOC,QAAU,IAA0B,2C,2ICkB5BC,EAbF,SAACC,GACb,IAAIC,EAAWD,EAAME,QAAUF,EAAMG,YAAc,aAAe,QAE9DC,EAAiBJ,EAAME,QAAUF,EAAMG,YAAcH,EAAMI,eAAiB,aAEhF,OACC,yBAAKC,UAAU,OAAOC,QAASF,GAC9B,yBAAKC,UAAWJ,EAAUM,IAAKC,IAAUC,IAAI,O,gBCoDjCC,G,kBAtDd,aAAc,IAAD,8BACZ,+CAIDC,MAAQ,CACPC,QAAS,EACTT,YAAa,EACbU,MAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IARZ,EAebC,oBAAsB,WACrB,EAAKC,SAAS,CACbZ,YAAaa,KAAKC,MAAsB,EAAhBD,KAAKE,aAjBlB,EAsBbC,WAAa,WACZ,EAAKC,cAAcC,QAAQC,YAAc,EACzC,EAAKF,cAAcC,QAAQE,OAC3B,EAAKR,SAAS,CACbH,QAAS,EAAKD,MAAMC,QAAU,KAxB/B,EAAKQ,cAAgBI,IAAMC,YAFf,E,iFAYZC,YAAYC,KAAKb,oBAAqB,O,+BAmB7B,IAAD,OACT,OACC,yBAAKT,UAAU,OACd,4BAAQA,UAAU,cACjB,yBAAKA,UAAU,WACd,2BAAOE,IAAKqB,IACRC,IAAKF,KAAKP,gBACbO,KAAKhB,MAAME,MAAMiB,KAAI,SAAAC,GAAC,OACvB,kBAAC,EAAD,CAAMC,IAAKD,EACX7B,MAAO6B,EACP5B,YAAa,EAAKQ,MAAMR,YACxBC,eAAgB,EAAKe,gBAErB,yBAAKd,UAAU,WACbsB,KAAKhB,MAAMC,gB,GA/CAY,IAAMS,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e54bc706.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/smile.9c77e7fb.png\";","module.exports = __webpack_public_path__ + \"static/media/laugh_2.7200b214.wav\";","module.exports = __webpack_public_path__ + \"static/media/crowd-excited.17d0467d.mp3\";","import React from 'react';\n\nimport './App.css';\nimport smileImg from \"./img/smile.png\";\n\nconst Item = (props) => {\n\tlet imgClass = props.index === props.randomIndex ? 'photo show' : 'photo';\n\n\tlet onClickHandler = props.index === props.randomIndex ? props.onClickHandler : () => {};\n\n\treturn (\n\t\t<div className=\"item\" onClick={onClickHandler}>\n\t\t\t<img className={imgClass} src={smileImg} alt=\"\"/>\n\t\t</div>\n\t);\n};\n\n\nexport default Item;\n","import React from 'react';\n\nimport './App.css';\nimport Item from \"./Item\";\nimport smileAudio from \"./audio/laugh_2.wav\";\nimport congrAudio from \"./audio/crowd-excited.mp3\";\n\n\nclass App extends React.Component{\n\n\tconstructor(){\n\t\tsuper();\n\t\tthis.smileAudioRef = React.createRef();\n\t}\n\n\tstate = {\n\t\tcounter: 0,\n\t\trandomIndex: 4,\n\t\titems: [0,1,2,3,4,5,6,7,8]\n\t};\n\n\tcomponentDidMount() {\n\t\tsetInterval(this.setRandomImageIndex, 1000)\n\t};\n\n\tsetRandomImageIndex = () => {\n\t\tthis.setState({\n\t\t\trandomIndex: Math.floor(Math.random() * 9)\n\t\t})\n\t};\n\n\n\tincCounter = () => {\n\t\tthis.smileAudioRef.current.currentTime = 0;\n\t\tthis.smileAudioRef.current.play();\n\t\tthis.setState({\n\t\t\tcounter: this.state.counter + 1\n\t\t})\n\t};\n\n\n\trender() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<div className=\"wrapper\">\n\t\t\t\t\t<audio src={smileAudio}\n\t\t\t\t\t\t   ref={this.smileAudioRef}></audio>\n\t\t\t\t\t{this.state.items.map(i =>\n\t\t\t\t\t<Item key={i}\n\t\t\t\t\tindex={i}\n\t\t\t\t\trandomIndex={this.state.randomIndex}\n\t\t\t\t\tonClickHandler={this.incCounter}/>\n\t\t\t\t\t)}\n\t\t\t\t\t<div className=\"counter\">\n\t\t\t\t\t\t{this.state.counter}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t</div>\n\t);}\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}